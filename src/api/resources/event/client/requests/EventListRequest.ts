/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Hookdeck from "../../../../index";

/**
 * @example
 *     {}
 *
 * @example
 *     {
 *         id: "string",
 *         status: Hookdeck.EventStatus.Scheduled,
 *         webhookId: "string",
 *         destinationId: "string",
 *         sourceId: "string",
 *         attempts: 1,
 *         responseStatus: 1,
 *         successfulAt: new Date("2024-01-15T09:30:00.000Z"),
 *         createdAt: new Date("2024-01-15T09:30:00.000Z"),
 *         errorCode: Hookdeck.AttemptErrorCodes.Cancelled,
 *         cliId: "string",
 *         lastAttemptAt: new Date("2024-01-15T09:30:00.000Z"),
 *         searchTerm: "string",
 *         headers: "string",
 *         body: "string",
 *         parsedQuery: "string",
 *         path: "string",
 *         cliUserId: "string",
 *         issueId: "string",
 *         eventDataId: "string",
 *         bulkRetryId: "string",
 *         include: "data",
 *         orderBy: Hookdeck.EventListRequestOrderBy.LastAttemptAt,
 *         dir: Hookdeck.EventListRequestDir.Asc,
 *         limit: 1,
 *         next: "string",
 *         prev: "string"
 *     }
 *
 * @example
 *     {
 *         id: "string",
 *         status: Hookdeck.EventStatus.Scheduled,
 *         webhookId: "string",
 *         destinationId: "string",
 *         sourceId: "string",
 *         attempts: 1,
 *         responseStatus: 1,
 *         successfulAt: new Date("2024-01-15T09:30:00.000Z"),
 *         createdAt: new Date("2024-01-15T09:30:00.000Z"),
 *         errorCode: Hookdeck.AttemptErrorCodes.Cancelled,
 *         cliId: "string",
 *         lastAttemptAt: new Date("2024-01-15T09:30:00.000Z"),
 *         searchTerm: "string",
 *         headers: "string",
 *         body: "string",
 *         parsedQuery: "string",
 *         path: "string",
 *         cliUserId: "string",
 *         issueId: "string",
 *         eventDataId: "string",
 *         bulkRetryId: "string",
 *         include: "data",
 *         orderBy: Hookdeck.EventListRequestOrderBy.LastAttemptAt,
 *         dir: Hookdeck.EventListRequestDir.Asc,
 *         limit: 1,
 *         next: "string",
 *         prev: "string"
 *     }
 *
 * @example
 *     {
 *         id: "string",
 *         status: Hookdeck.EventStatus.Scheduled,
 *         webhookId: "string",
 *         destinationId: "string",
 *         sourceId: "string",
 *         attempts: 1,
 *         responseStatus: 1,
 *         successfulAt: new Date("2024-01-15T09:30:00.000Z"),
 *         createdAt: new Date("2024-01-15T09:30:00.000Z"),
 *         errorCode: Hookdeck.AttemptErrorCodes.Cancelled,
 *         cliId: "string",
 *         lastAttemptAt: new Date("2024-01-15T09:30:00.000Z"),
 *         searchTerm: "string",
 *         headers: "string",
 *         body: "string",
 *         parsedQuery: "string",
 *         path: "string",
 *         cliUserId: "string",
 *         issueId: "string",
 *         eventDataId: "string",
 *         bulkRetryId: "string",
 *         include: "data",
 *         orderBy: Hookdeck.EventListRequestOrderBy.LastAttemptAt,
 *         dir: Hookdeck.EventListRequestDir.Asc,
 *         limit: 1,
 *         next: "string",
 *         prev: "string"
 *     }
 */
export interface EventListRequest {
    id?: string | string[];
    status?: Hookdeck.EventStatus;
    webhookId?: string | string[];
    destinationId?: string | string[];
    sourceId?: string | string[];
    attempts?: number;
    responseStatus?: number;
    successfulAt?: Date;
    createdAt?: Date;
    errorCode?: Hookdeck.AttemptErrorCodes;
    cliId?: string;
    lastAttemptAt?: Date;
    searchTerm?: string;
    headers?: string;
    body?: string;
    parsedQuery?: string;
    path?: string;
    cliUserId?: string | string[];
    issueId?: string | string[];
    eventDataId?: string | string[];
    bulkRetryId?: string | string[];
    include?: "data";
    orderBy?: Hookdeck.EventListRequestOrderBy;
    dir?: Hookdeck.EventListRequestDir;
    limit?: number;
    next?: string;
    prev?: string;
}
